// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/06/2024 10:41:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Arithmetic_LU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Arithmetic_LU_vlg_sample_tst(
	iA,
	iB,
	iClk,
	iLinshiftleft,
	iLinshiftright,
	iOpCode,
	iReset,
	sampler_tx
);
input [7:0] iA;
input [7:0] iB;
input  iClk;
input  iLinshiftleft;
input  iLinshiftright;
input [3:0] iOpCode;
input  iReset;
output sampler_tx;

reg sample;
time current_time;
always @(iA or iB or iClk or iLinshiftleft or iLinshiftright or iOpCode or iReset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Arithmetic_LU_vlg_check_tst (
	Equal,
	SubNeg,
	SubPos,
	oAccu,
	oCarryFlag,
	oDiff,
	oQ_leftA,
	oQ_leftB,
	oQ_rightA,
	oQ_rightB,
	oZeroFlag,
	sampler_rx
);
input [7:0] Equal;
input [7:0] SubNeg;
input [7:0] SubPos;
input [7:0] oAccu;
input  oCarryFlag;
input [7:0] oDiff;
input [7:0] oQ_leftA;
input [7:0] oQ_leftB;
input [7:0] oQ_rightA;
input [7:0] oQ_rightB;
input  oZeroFlag;
input sampler_rx;

reg [7:0] Equal_expected;
reg [7:0] SubNeg_expected;
reg [7:0] SubPos_expected;
reg [7:0] oAccu_expected;
reg  oCarryFlag_expected;
reg [7:0] oDiff_expected;
reg [7:0] oQ_leftA_expected;
reg [7:0] oQ_leftB_expected;
reg [7:0] oQ_rightA_expected;
reg [7:0] oQ_rightB_expected;
reg  oZeroFlag_expected;

reg [7:0] Equal_prev;
reg [7:0] SubNeg_prev;
reg [7:0] SubPos_prev;
reg [7:0] oAccu_prev;
reg  oCarryFlag_prev;
reg [7:0] oDiff_prev;
reg [7:0] oQ_leftA_prev;
reg [7:0] oQ_leftB_prev;
reg [7:0] oQ_rightA_prev;
reg [7:0] oQ_rightB_prev;
reg  oZeroFlag_prev;

reg [7:0] Equal_expected_prev;
reg [7:0] SubNeg_expected_prev;
reg [7:0] SubPos_expected_prev;
reg [7:0] oAccu_expected_prev;
reg  oCarryFlag_expected_prev;
reg [7:0] oDiff_expected_prev;
reg [7:0] oQ_leftA_expected_prev;
reg [7:0] oQ_leftB_expected_prev;
reg [7:0] oQ_rightA_expected_prev;
reg [7:0] oQ_rightB_expected_prev;
reg  oZeroFlag_expected_prev;

reg [7:0] last_Equal_exp;
reg [7:0] last_SubNeg_exp;
reg [7:0] last_SubPos_exp;
reg [7:0] last_oAccu_exp;
reg  last_oCarryFlag_exp;
reg [7:0] last_oDiff_exp;
reg [7:0] last_oQ_leftA_exp;
reg [7:0] last_oQ_leftB_exp;
reg [7:0] last_oQ_rightA_exp;
reg [7:0] last_oQ_rightB_exp;
reg  last_oZeroFlag_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	Equal_prev = Equal;
	SubNeg_prev = SubNeg;
	SubPos_prev = SubPos;
	oAccu_prev = oAccu;
	oCarryFlag_prev = oCarryFlag;
	oDiff_prev = oDiff;
	oQ_leftA_prev = oQ_leftA;
	oQ_leftB_prev = oQ_leftB;
	oQ_rightA_prev = oQ_rightA;
	oQ_rightB_prev = oQ_rightB;
	oZeroFlag_prev = oZeroFlag;
end

// update expected /o prevs

always @(trigger)
begin
	Equal_expected_prev = Equal_expected;
	SubNeg_expected_prev = SubNeg_expected;
	SubPos_expected_prev = SubPos_expected;
	oAccu_expected_prev = oAccu_expected;
	oCarryFlag_expected_prev = oCarryFlag_expected;
	oDiff_expected_prev = oDiff_expected;
	oQ_leftA_expected_prev = oQ_leftA_expected;
	oQ_leftB_expected_prev = oQ_leftB_expected;
	oQ_rightA_expected_prev = oQ_rightA_expected;
	oQ_rightB_expected_prev = oQ_rightB_expected;
	oZeroFlag_expected_prev = oZeroFlag_expected;
end


// expected oAccu[ 7 ]
initial
begin
	oAccu_expected[7] = 1'bX;
end 
// expected oAccu[ 6 ]
initial
begin
	oAccu_expected[6] = 1'bX;
end 
// expected oAccu[ 5 ]
initial
begin
	oAccu_expected[5] = 1'bX;
end 
// expected oAccu[ 4 ]
initial
begin
	oAccu_expected[4] = 1'bX;
end 
// expected oAccu[ 3 ]
initial
begin
	oAccu_expected[3] = 1'bX;
end 
// expected oAccu[ 2 ]
initial
begin
	oAccu_expected[2] = 1'bX;
end 
// expected oAccu[ 1 ]
initial
begin
	oAccu_expected[1] = 1'bX;
end 
// expected oAccu[ 0 ]
initial
begin
	oAccu_expected[0] = 1'bX;
end 

// expected oZeroFlag
initial
begin
	oZeroFlag_expected = 1'bX;
end 

// expected oCarryFlag
initial
begin
	oCarryFlag_expected = 1'bX;
end 
// expected oDiff[ 7 ]
initial
begin
	oDiff_expected[7] = 1'bX;
end 
// expected oDiff[ 6 ]
initial
begin
	oDiff_expected[6] = 1'bX;
end 
// expected oDiff[ 5 ]
initial
begin
	oDiff_expected[5] = 1'bX;
end 
// expected oDiff[ 4 ]
initial
begin
	oDiff_expected[4] = 1'bX;
end 
// expected oDiff[ 3 ]
initial
begin
	oDiff_expected[3] = 1'bX;
end 
// expected oDiff[ 2 ]
initial
begin
	oDiff_expected[2] = 1'bX;
end 
// expected oDiff[ 1 ]
initial
begin
	oDiff_expected[1] = 1'bX;
end 
// expected oDiff[ 0 ]
initial
begin
	oDiff_expected[0] = 1'bX;
end 
// expected oQ_leftA[ 7 ]
initial
begin
	oQ_leftA_expected[7] = 1'bX;
end 
// expected oQ_leftA[ 6 ]
initial
begin
	oQ_leftA_expected[6] = 1'bX;
end 
// expected oQ_leftA[ 5 ]
initial
begin
	oQ_leftA_expected[5] = 1'bX;
end 
// expected oQ_leftA[ 4 ]
initial
begin
	oQ_leftA_expected[4] = 1'bX;
end 
// expected oQ_leftA[ 3 ]
initial
begin
	oQ_leftA_expected[3] = 1'bX;
end 
// expected oQ_leftA[ 2 ]
initial
begin
	oQ_leftA_expected[2] = 1'bX;
end 
// expected oQ_leftA[ 1 ]
initial
begin
	oQ_leftA_expected[1] = 1'bX;
end 
// expected oQ_leftA[ 0 ]
initial
begin
	oQ_leftA_expected[0] = 1'bX;
end 
// expected oQ_leftB[ 7 ]
initial
begin
	oQ_leftB_expected[7] = 1'bX;
end 
// expected oQ_leftB[ 6 ]
initial
begin
	oQ_leftB_expected[6] = 1'bX;
end 
// expected oQ_leftB[ 5 ]
initial
begin
	oQ_leftB_expected[5] = 1'bX;
end 
// expected oQ_leftB[ 4 ]
initial
begin
	oQ_leftB_expected[4] = 1'bX;
end 
// expected oQ_leftB[ 3 ]
initial
begin
	oQ_leftB_expected[3] = 1'bX;
end 
// expected oQ_leftB[ 2 ]
initial
begin
	oQ_leftB_expected[2] = 1'bX;
end 
// expected oQ_leftB[ 1 ]
initial
begin
	oQ_leftB_expected[1] = 1'bX;
end 
// expected oQ_leftB[ 0 ]
initial
begin
	oQ_leftB_expected[0] = 1'bX;
end 
// expected oQ_rightA[ 7 ]
initial
begin
	oQ_rightA_expected[7] = 1'bX;
end 
// expected oQ_rightA[ 6 ]
initial
begin
	oQ_rightA_expected[6] = 1'bX;
end 
// expected oQ_rightA[ 5 ]
initial
begin
	oQ_rightA_expected[5] = 1'bX;
end 
// expected oQ_rightA[ 4 ]
initial
begin
	oQ_rightA_expected[4] = 1'bX;
end 
// expected oQ_rightA[ 3 ]
initial
begin
	oQ_rightA_expected[3] = 1'bX;
end 
// expected oQ_rightA[ 2 ]
initial
begin
	oQ_rightA_expected[2] = 1'bX;
end 
// expected oQ_rightA[ 1 ]
initial
begin
	oQ_rightA_expected[1] = 1'bX;
end 
// expected oQ_rightA[ 0 ]
initial
begin
	oQ_rightA_expected[0] = 1'bX;
end 
// expected oQ_rightB[ 7 ]
initial
begin
	oQ_rightB_expected[7] = 1'bX;
end 
// expected oQ_rightB[ 6 ]
initial
begin
	oQ_rightB_expected[6] = 1'bX;
end 
// expected oQ_rightB[ 5 ]
initial
begin
	oQ_rightB_expected[5] = 1'bX;
end 
// expected oQ_rightB[ 4 ]
initial
begin
	oQ_rightB_expected[4] = 1'bX;
end 
// expected oQ_rightB[ 3 ]
initial
begin
	oQ_rightB_expected[3] = 1'bX;
end 
// expected oQ_rightB[ 2 ]
initial
begin
	oQ_rightB_expected[2] = 1'bX;
end 
// expected oQ_rightB[ 1 ]
initial
begin
	oQ_rightB_expected[1] = 1'bX;
end 
// expected oQ_rightB[ 0 ]
initial
begin
	oQ_rightB_expected[0] = 1'bX;
end 
// expected Equal[ 7 ]
initial
begin
	Equal_expected[7] = 1'bX;
end 
// expected Equal[ 6 ]
initial
begin
	Equal_expected[6] = 1'bX;
end 
// expected Equal[ 5 ]
initial
begin
	Equal_expected[5] = 1'bX;
end 
// expected Equal[ 4 ]
initial
begin
	Equal_expected[4] = 1'bX;
end 
// expected Equal[ 3 ]
initial
begin
	Equal_expected[3] = 1'bX;
end 
// expected Equal[ 2 ]
initial
begin
	Equal_expected[2] = 1'bX;
end 
// expected Equal[ 1 ]
initial
begin
	Equal_expected[1] = 1'bX;
end 
// expected Equal[ 0 ]
initial
begin
	Equal_expected[0] = 1'bX;
end 
// expected SubNeg[ 7 ]
initial
begin
	SubNeg_expected[7] = 1'bX;
end 
// expected SubNeg[ 6 ]
initial
begin
	SubNeg_expected[6] = 1'bX;
end 
// expected SubNeg[ 5 ]
initial
begin
	SubNeg_expected[5] = 1'bX;
end 
// expected SubNeg[ 4 ]
initial
begin
	SubNeg_expected[4] = 1'bX;
end 
// expected SubNeg[ 3 ]
initial
begin
	SubNeg_expected[3] = 1'bX;
end 
// expected SubNeg[ 2 ]
initial
begin
	SubNeg_expected[2] = 1'bX;
end 
// expected SubNeg[ 1 ]
initial
begin
	SubNeg_expected[1] = 1'bX;
end 
// expected SubNeg[ 0 ]
initial
begin
	SubNeg_expected[0] = 1'bX;
end 
// expected SubPos[ 7 ]
initial
begin
	SubPos_expected[7] = 1'bX;
end 
// expected SubPos[ 6 ]
initial
begin
	SubPos_expected[6] = 1'bX;
end 
// expected SubPos[ 5 ]
initial
begin
	SubPos_expected[5] = 1'bX;
end 
// expected SubPos[ 4 ]
initial
begin
	SubPos_expected[4] = 1'bX;
end 
// expected SubPos[ 3 ]
initial
begin
	SubPos_expected[3] = 1'bX;
end 
// expected SubPos[ 2 ]
initial
begin
	SubPos_expected[2] = 1'bX;
end 
// expected SubPos[ 1 ]
initial
begin
	SubPos_expected[1] = 1'bX;
end 
// expected SubPos[ 0 ]
initial
begin
	SubPos_expected[0] = 1'bX;
end 
// generate trigger
always @(Equal_expected or Equal or SubNeg_expected or SubNeg or SubPos_expected or SubPos or oAccu_expected or oAccu or oCarryFlag_expected or oCarryFlag or oDiff_expected or oDiff or oQ_leftA_expected or oQ_leftA or oQ_leftB_expected or oQ_leftB or oQ_rightA_expected or oQ_rightA or oQ_rightB_expected or oQ_rightB or oZeroFlag_expected or oZeroFlag)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Equal = %b | expected SubNeg = %b | expected SubPos = %b | expected oAccu = %b | expected oCarryFlag = %b | expected oDiff = %b | expected oQ_leftA = %b | expected oQ_leftB = %b | expected oQ_rightA = %b | expected oQ_rightB = %b | expected oZeroFlag = %b | ",Equal_expected_prev,SubNeg_expected_prev,SubPos_expected_prev,oAccu_expected_prev,oCarryFlag_expected_prev,oDiff_expected_prev,oQ_leftA_expected_prev,oQ_leftB_expected_prev,oQ_rightA_expected_prev,oQ_rightB_expected_prev,oZeroFlag_expected_prev);
	$display("| real Equal = %b | real SubNeg = %b | real SubPos = %b | real oAccu = %b | real oCarryFlag = %b | real oDiff = %b | real oQ_leftA = %b | real oQ_leftB = %b | real oQ_rightA = %b | real oQ_rightB = %b | real oZeroFlag = %b | ",Equal_prev,SubNeg_prev,SubPos_prev,oAccu_prev,oCarryFlag_prev,oDiff_prev,oQ_leftA_prev,oQ_leftB_prev,oQ_rightA_prev,oQ_rightB_prev,oZeroFlag_prev);
`endif
	if (
		( Equal_expected_prev[0] !== 1'bx ) && ( Equal_prev[0] !== Equal_expected_prev[0] )
		&& ((Equal_expected_prev[0] !== last_Equal_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Equal[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Equal_expected_prev);
		$display ("     Real value = %b", Equal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Equal_exp[0] = Equal_expected_prev[0];
	end
	if (
		( Equal_expected_prev[1] !== 1'bx ) && ( Equal_prev[1] !== Equal_expected_prev[1] )
		&& ((Equal_expected_prev[1] !== last_Equal_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Equal[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Equal_expected_prev);
		$display ("     Real value = %b", Equal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Equal_exp[1] = Equal_expected_prev[1];
	end
	if (
		( Equal_expected_prev[2] !== 1'bx ) && ( Equal_prev[2] !== Equal_expected_prev[2] )
		&& ((Equal_expected_prev[2] !== last_Equal_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Equal[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Equal_expected_prev);
		$display ("     Real value = %b", Equal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Equal_exp[2] = Equal_expected_prev[2];
	end
	if (
		( Equal_expected_prev[3] !== 1'bx ) && ( Equal_prev[3] !== Equal_expected_prev[3] )
		&& ((Equal_expected_prev[3] !== last_Equal_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Equal[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Equal_expected_prev);
		$display ("     Real value = %b", Equal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Equal_exp[3] = Equal_expected_prev[3];
	end
	if (
		( Equal_expected_prev[4] !== 1'bx ) && ( Equal_prev[4] !== Equal_expected_prev[4] )
		&& ((Equal_expected_prev[4] !== last_Equal_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Equal[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Equal_expected_prev);
		$display ("     Real value = %b", Equal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Equal_exp[4] = Equal_expected_prev[4];
	end
	if (
		( Equal_expected_prev[5] !== 1'bx ) && ( Equal_prev[5] !== Equal_expected_prev[5] )
		&& ((Equal_expected_prev[5] !== last_Equal_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Equal[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Equal_expected_prev);
		$display ("     Real value = %b", Equal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Equal_exp[5] = Equal_expected_prev[5];
	end
	if (
		( Equal_expected_prev[6] !== 1'bx ) && ( Equal_prev[6] !== Equal_expected_prev[6] )
		&& ((Equal_expected_prev[6] !== last_Equal_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Equal[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Equal_expected_prev);
		$display ("     Real value = %b", Equal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Equal_exp[6] = Equal_expected_prev[6];
	end
	if (
		( Equal_expected_prev[7] !== 1'bx ) && ( Equal_prev[7] !== Equal_expected_prev[7] )
		&& ((Equal_expected_prev[7] !== last_Equal_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Equal[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Equal_expected_prev);
		$display ("     Real value = %b", Equal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Equal_exp[7] = Equal_expected_prev[7];
	end
	if (
		( SubNeg_expected_prev[0] !== 1'bx ) && ( SubNeg_prev[0] !== SubNeg_expected_prev[0] )
		&& ((SubNeg_expected_prev[0] !== last_SubNeg_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubNeg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubNeg_expected_prev);
		$display ("     Real value = %b", SubNeg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SubNeg_exp[0] = SubNeg_expected_prev[0];
	end
	if (
		( SubNeg_expected_prev[1] !== 1'bx ) && ( SubNeg_prev[1] !== SubNeg_expected_prev[1] )
		&& ((SubNeg_expected_prev[1] !== last_SubNeg_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubNeg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubNeg_expected_prev);
		$display ("     Real value = %b", SubNeg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SubNeg_exp[1] = SubNeg_expected_prev[1];
	end
	if (
		( SubNeg_expected_prev[2] !== 1'bx ) && ( SubNeg_prev[2] !== SubNeg_expected_prev[2] )
		&& ((SubNeg_expected_prev[2] !== last_SubNeg_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubNeg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubNeg_expected_prev);
		$display ("     Real value = %b", SubNeg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SubNeg_exp[2] = SubNeg_expected_prev[2];
	end
	if (
		( SubNeg_expected_prev[3] !== 1'bx ) && ( SubNeg_prev[3] !== SubNeg_expected_prev[3] )
		&& ((SubNeg_expected_prev[3] !== last_SubNeg_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubNeg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubNeg_expected_prev);
		$display ("     Real value = %b", SubNeg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SubNeg_exp[3] = SubNeg_expected_prev[3];
	end
	if (
		( SubNeg_expected_prev[4] !== 1'bx ) && ( SubNeg_prev[4] !== SubNeg_expected_prev[4] )
		&& ((SubNeg_expected_prev[4] !== last_SubNeg_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubNeg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubNeg_expected_prev);
		$display ("     Real value = %b", SubNeg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SubNeg_exp[4] = SubNeg_expected_prev[4];
	end
	if (
		( SubNeg_expected_prev[5] !== 1'bx ) && ( SubNeg_prev[5] !== SubNeg_expected_prev[5] )
		&& ((SubNeg_expected_prev[5] !== last_SubNeg_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubNeg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubNeg_expected_prev);
		$display ("     Real value = %b", SubNeg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SubNeg_exp[5] = SubNeg_expected_prev[5];
	end
	if (
		( SubNeg_expected_prev[6] !== 1'bx ) && ( SubNeg_prev[6] !== SubNeg_expected_prev[6] )
		&& ((SubNeg_expected_prev[6] !== last_SubNeg_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubNeg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubNeg_expected_prev);
		$display ("     Real value = %b", SubNeg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SubNeg_exp[6] = SubNeg_expected_prev[6];
	end
	if (
		( SubNeg_expected_prev[7] !== 1'bx ) && ( SubNeg_prev[7] !== SubNeg_expected_prev[7] )
		&& ((SubNeg_expected_prev[7] !== last_SubNeg_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubNeg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubNeg_expected_prev);
		$display ("     Real value = %b", SubNeg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SubNeg_exp[7] = SubNeg_expected_prev[7];
	end
	if (
		( SubPos_expected_prev[0] !== 1'bx ) && ( SubPos_prev[0] !== SubPos_expected_prev[0] )
		&& ((SubPos_expected_prev[0] !== last_SubPos_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubPos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubPos_expected_prev);
		$display ("     Real value = %b", SubPos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SubPos_exp[0] = SubPos_expected_prev[0];
	end
	if (
		( SubPos_expected_prev[1] !== 1'bx ) && ( SubPos_prev[1] !== SubPos_expected_prev[1] )
		&& ((SubPos_expected_prev[1] !== last_SubPos_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubPos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubPos_expected_prev);
		$display ("     Real value = %b", SubPos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SubPos_exp[1] = SubPos_expected_prev[1];
	end
	if (
		( SubPos_expected_prev[2] !== 1'bx ) && ( SubPos_prev[2] !== SubPos_expected_prev[2] )
		&& ((SubPos_expected_prev[2] !== last_SubPos_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubPos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubPos_expected_prev);
		$display ("     Real value = %b", SubPos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SubPos_exp[2] = SubPos_expected_prev[2];
	end
	if (
		( SubPos_expected_prev[3] !== 1'bx ) && ( SubPos_prev[3] !== SubPos_expected_prev[3] )
		&& ((SubPos_expected_prev[3] !== last_SubPos_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubPos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubPos_expected_prev);
		$display ("     Real value = %b", SubPos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SubPos_exp[3] = SubPos_expected_prev[3];
	end
	if (
		( SubPos_expected_prev[4] !== 1'bx ) && ( SubPos_prev[4] !== SubPos_expected_prev[4] )
		&& ((SubPos_expected_prev[4] !== last_SubPos_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubPos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubPos_expected_prev);
		$display ("     Real value = %b", SubPos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SubPos_exp[4] = SubPos_expected_prev[4];
	end
	if (
		( SubPos_expected_prev[5] !== 1'bx ) && ( SubPos_prev[5] !== SubPos_expected_prev[5] )
		&& ((SubPos_expected_prev[5] !== last_SubPos_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubPos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubPos_expected_prev);
		$display ("     Real value = %b", SubPos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SubPos_exp[5] = SubPos_expected_prev[5];
	end
	if (
		( SubPos_expected_prev[6] !== 1'bx ) && ( SubPos_prev[6] !== SubPos_expected_prev[6] )
		&& ((SubPos_expected_prev[6] !== last_SubPos_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubPos[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubPos_expected_prev);
		$display ("     Real value = %b", SubPos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SubPos_exp[6] = SubPos_expected_prev[6];
	end
	if (
		( SubPos_expected_prev[7] !== 1'bx ) && ( SubPos_prev[7] !== SubPos_expected_prev[7] )
		&& ((SubPos_expected_prev[7] !== last_SubPos_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SubPos[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SubPos_expected_prev);
		$display ("     Real value = %b", SubPos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SubPos_exp[7] = SubPos_expected_prev[7];
	end
	if (
		( oAccu_expected_prev[0] !== 1'bx ) && ( oAccu_prev[0] !== oAccu_expected_prev[0] )
		&& ((oAccu_expected_prev[0] !== last_oAccu_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccu_expected_prev);
		$display ("     Real value = %b", oAccu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oAccu_exp[0] = oAccu_expected_prev[0];
	end
	if (
		( oAccu_expected_prev[1] !== 1'bx ) && ( oAccu_prev[1] !== oAccu_expected_prev[1] )
		&& ((oAccu_expected_prev[1] !== last_oAccu_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccu_expected_prev);
		$display ("     Real value = %b", oAccu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oAccu_exp[1] = oAccu_expected_prev[1];
	end
	if (
		( oAccu_expected_prev[2] !== 1'bx ) && ( oAccu_prev[2] !== oAccu_expected_prev[2] )
		&& ((oAccu_expected_prev[2] !== last_oAccu_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccu_expected_prev);
		$display ("     Real value = %b", oAccu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oAccu_exp[2] = oAccu_expected_prev[2];
	end
	if (
		( oAccu_expected_prev[3] !== 1'bx ) && ( oAccu_prev[3] !== oAccu_expected_prev[3] )
		&& ((oAccu_expected_prev[3] !== last_oAccu_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccu_expected_prev);
		$display ("     Real value = %b", oAccu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oAccu_exp[3] = oAccu_expected_prev[3];
	end
	if (
		( oAccu_expected_prev[4] !== 1'bx ) && ( oAccu_prev[4] !== oAccu_expected_prev[4] )
		&& ((oAccu_expected_prev[4] !== last_oAccu_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccu_expected_prev);
		$display ("     Real value = %b", oAccu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oAccu_exp[4] = oAccu_expected_prev[4];
	end
	if (
		( oAccu_expected_prev[5] !== 1'bx ) && ( oAccu_prev[5] !== oAccu_expected_prev[5] )
		&& ((oAccu_expected_prev[5] !== last_oAccu_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccu_expected_prev);
		$display ("     Real value = %b", oAccu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oAccu_exp[5] = oAccu_expected_prev[5];
	end
	if (
		( oAccu_expected_prev[6] !== 1'bx ) && ( oAccu_prev[6] !== oAccu_expected_prev[6] )
		&& ((oAccu_expected_prev[6] !== last_oAccu_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccu_expected_prev);
		$display ("     Real value = %b", oAccu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oAccu_exp[6] = oAccu_expected_prev[6];
	end
	if (
		( oAccu_expected_prev[7] !== 1'bx ) && ( oAccu_prev[7] !== oAccu_expected_prev[7] )
		&& ((oAccu_expected_prev[7] !== last_oAccu_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccu_expected_prev);
		$display ("     Real value = %b", oAccu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oAccu_exp[7] = oAccu_expected_prev[7];
	end
	if (
		( oCarryFlag_expected_prev !== 1'bx ) && ( oCarryFlag_prev !== oCarryFlag_expected_prev )
		&& ((oCarryFlag_expected_prev !== last_oCarryFlag_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oCarryFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oCarryFlag_expected_prev);
		$display ("     Real value = %b", oCarryFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oCarryFlag_exp = oCarryFlag_expected_prev;
	end
	if (
		( oDiff_expected_prev[0] !== 1'bx ) && ( oDiff_prev[0] !== oDiff_expected_prev[0] )
		&& ((oDiff_expected_prev[0] !== last_oDiff_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDiff[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDiff_expected_prev);
		$display ("     Real value = %b", oDiff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_oDiff_exp[0] = oDiff_expected_prev[0];
	end
	if (
		( oDiff_expected_prev[1] !== 1'bx ) && ( oDiff_prev[1] !== oDiff_expected_prev[1] )
		&& ((oDiff_expected_prev[1] !== last_oDiff_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDiff[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDiff_expected_prev);
		$display ("     Real value = %b", oDiff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_oDiff_exp[1] = oDiff_expected_prev[1];
	end
	if (
		( oDiff_expected_prev[2] !== 1'bx ) && ( oDiff_prev[2] !== oDiff_expected_prev[2] )
		&& ((oDiff_expected_prev[2] !== last_oDiff_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDiff[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDiff_expected_prev);
		$display ("     Real value = %b", oDiff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_oDiff_exp[2] = oDiff_expected_prev[2];
	end
	if (
		( oDiff_expected_prev[3] !== 1'bx ) && ( oDiff_prev[3] !== oDiff_expected_prev[3] )
		&& ((oDiff_expected_prev[3] !== last_oDiff_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDiff[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDiff_expected_prev);
		$display ("     Real value = %b", oDiff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_oDiff_exp[3] = oDiff_expected_prev[3];
	end
	if (
		( oDiff_expected_prev[4] !== 1'bx ) && ( oDiff_prev[4] !== oDiff_expected_prev[4] )
		&& ((oDiff_expected_prev[4] !== last_oDiff_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDiff[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDiff_expected_prev);
		$display ("     Real value = %b", oDiff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_oDiff_exp[4] = oDiff_expected_prev[4];
	end
	if (
		( oDiff_expected_prev[5] !== 1'bx ) && ( oDiff_prev[5] !== oDiff_expected_prev[5] )
		&& ((oDiff_expected_prev[5] !== last_oDiff_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDiff[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDiff_expected_prev);
		$display ("     Real value = %b", oDiff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_oDiff_exp[5] = oDiff_expected_prev[5];
	end
	if (
		( oDiff_expected_prev[6] !== 1'bx ) && ( oDiff_prev[6] !== oDiff_expected_prev[6] )
		&& ((oDiff_expected_prev[6] !== last_oDiff_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDiff[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDiff_expected_prev);
		$display ("     Real value = %b", oDiff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_oDiff_exp[6] = oDiff_expected_prev[6];
	end
	if (
		( oDiff_expected_prev[7] !== 1'bx ) && ( oDiff_prev[7] !== oDiff_expected_prev[7] )
		&& ((oDiff_expected_prev[7] !== last_oDiff_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDiff[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDiff_expected_prev);
		$display ("     Real value = %b", oDiff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_oDiff_exp[7] = oDiff_expected_prev[7];
	end
	if (
		( oQ_leftA_expected_prev[0] !== 1'bx ) && ( oQ_leftA_prev[0] !== oQ_leftA_expected_prev[0] )
		&& ((oQ_leftA_expected_prev[0] !== last_oQ_leftA_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftA_expected_prev);
		$display ("     Real value = %b", oQ_leftA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oQ_leftA_exp[0] = oQ_leftA_expected_prev[0];
	end
	if (
		( oQ_leftA_expected_prev[1] !== 1'bx ) && ( oQ_leftA_prev[1] !== oQ_leftA_expected_prev[1] )
		&& ((oQ_leftA_expected_prev[1] !== last_oQ_leftA_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftA_expected_prev);
		$display ("     Real value = %b", oQ_leftA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oQ_leftA_exp[1] = oQ_leftA_expected_prev[1];
	end
	if (
		( oQ_leftA_expected_prev[2] !== 1'bx ) && ( oQ_leftA_prev[2] !== oQ_leftA_expected_prev[2] )
		&& ((oQ_leftA_expected_prev[2] !== last_oQ_leftA_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftA_expected_prev);
		$display ("     Real value = %b", oQ_leftA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oQ_leftA_exp[2] = oQ_leftA_expected_prev[2];
	end
	if (
		( oQ_leftA_expected_prev[3] !== 1'bx ) && ( oQ_leftA_prev[3] !== oQ_leftA_expected_prev[3] )
		&& ((oQ_leftA_expected_prev[3] !== last_oQ_leftA_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftA_expected_prev);
		$display ("     Real value = %b", oQ_leftA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oQ_leftA_exp[3] = oQ_leftA_expected_prev[3];
	end
	if (
		( oQ_leftA_expected_prev[4] !== 1'bx ) && ( oQ_leftA_prev[4] !== oQ_leftA_expected_prev[4] )
		&& ((oQ_leftA_expected_prev[4] !== last_oQ_leftA_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftA_expected_prev);
		$display ("     Real value = %b", oQ_leftA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oQ_leftA_exp[4] = oQ_leftA_expected_prev[4];
	end
	if (
		( oQ_leftA_expected_prev[5] !== 1'bx ) && ( oQ_leftA_prev[5] !== oQ_leftA_expected_prev[5] )
		&& ((oQ_leftA_expected_prev[5] !== last_oQ_leftA_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftA_expected_prev);
		$display ("     Real value = %b", oQ_leftA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oQ_leftA_exp[5] = oQ_leftA_expected_prev[5];
	end
	if (
		( oQ_leftA_expected_prev[6] !== 1'bx ) && ( oQ_leftA_prev[6] !== oQ_leftA_expected_prev[6] )
		&& ((oQ_leftA_expected_prev[6] !== last_oQ_leftA_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftA_expected_prev);
		$display ("     Real value = %b", oQ_leftA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oQ_leftA_exp[6] = oQ_leftA_expected_prev[6];
	end
	if (
		( oQ_leftA_expected_prev[7] !== 1'bx ) && ( oQ_leftA_prev[7] !== oQ_leftA_expected_prev[7] )
		&& ((oQ_leftA_expected_prev[7] !== last_oQ_leftA_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftA_expected_prev);
		$display ("     Real value = %b", oQ_leftA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_oQ_leftA_exp[7] = oQ_leftA_expected_prev[7];
	end
	if (
		( oQ_leftB_expected_prev[0] !== 1'bx ) && ( oQ_leftB_prev[0] !== oQ_leftB_expected_prev[0] )
		&& ((oQ_leftB_expected_prev[0] !== last_oQ_leftB_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftB_expected_prev);
		$display ("     Real value = %b", oQ_leftB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_oQ_leftB_exp[0] = oQ_leftB_expected_prev[0];
	end
	if (
		( oQ_leftB_expected_prev[1] !== 1'bx ) && ( oQ_leftB_prev[1] !== oQ_leftB_expected_prev[1] )
		&& ((oQ_leftB_expected_prev[1] !== last_oQ_leftB_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftB_expected_prev);
		$display ("     Real value = %b", oQ_leftB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_oQ_leftB_exp[1] = oQ_leftB_expected_prev[1];
	end
	if (
		( oQ_leftB_expected_prev[2] !== 1'bx ) && ( oQ_leftB_prev[2] !== oQ_leftB_expected_prev[2] )
		&& ((oQ_leftB_expected_prev[2] !== last_oQ_leftB_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftB_expected_prev);
		$display ("     Real value = %b", oQ_leftB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_oQ_leftB_exp[2] = oQ_leftB_expected_prev[2];
	end
	if (
		( oQ_leftB_expected_prev[3] !== 1'bx ) && ( oQ_leftB_prev[3] !== oQ_leftB_expected_prev[3] )
		&& ((oQ_leftB_expected_prev[3] !== last_oQ_leftB_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftB_expected_prev);
		$display ("     Real value = %b", oQ_leftB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_oQ_leftB_exp[3] = oQ_leftB_expected_prev[3];
	end
	if (
		( oQ_leftB_expected_prev[4] !== 1'bx ) && ( oQ_leftB_prev[4] !== oQ_leftB_expected_prev[4] )
		&& ((oQ_leftB_expected_prev[4] !== last_oQ_leftB_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftB_expected_prev);
		$display ("     Real value = %b", oQ_leftB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_oQ_leftB_exp[4] = oQ_leftB_expected_prev[4];
	end
	if (
		( oQ_leftB_expected_prev[5] !== 1'bx ) && ( oQ_leftB_prev[5] !== oQ_leftB_expected_prev[5] )
		&& ((oQ_leftB_expected_prev[5] !== last_oQ_leftB_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftB_expected_prev);
		$display ("     Real value = %b", oQ_leftB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_oQ_leftB_exp[5] = oQ_leftB_expected_prev[5];
	end
	if (
		( oQ_leftB_expected_prev[6] !== 1'bx ) && ( oQ_leftB_prev[6] !== oQ_leftB_expected_prev[6] )
		&& ((oQ_leftB_expected_prev[6] !== last_oQ_leftB_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftB_expected_prev);
		$display ("     Real value = %b", oQ_leftB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_oQ_leftB_exp[6] = oQ_leftB_expected_prev[6];
	end
	if (
		( oQ_leftB_expected_prev[7] !== 1'bx ) && ( oQ_leftB_prev[7] !== oQ_leftB_expected_prev[7] )
		&& ((oQ_leftB_expected_prev[7] !== last_oQ_leftB_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_leftB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_leftB_expected_prev);
		$display ("     Real value = %b", oQ_leftB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_oQ_leftB_exp[7] = oQ_leftB_expected_prev[7];
	end
	if (
		( oQ_rightA_expected_prev[0] !== 1'bx ) && ( oQ_rightA_prev[0] !== oQ_rightA_expected_prev[0] )
		&& ((oQ_rightA_expected_prev[0] !== last_oQ_rightA_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightA_expected_prev);
		$display ("     Real value = %b", oQ_rightA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_oQ_rightA_exp[0] = oQ_rightA_expected_prev[0];
	end
	if (
		( oQ_rightA_expected_prev[1] !== 1'bx ) && ( oQ_rightA_prev[1] !== oQ_rightA_expected_prev[1] )
		&& ((oQ_rightA_expected_prev[1] !== last_oQ_rightA_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightA_expected_prev);
		$display ("     Real value = %b", oQ_rightA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_oQ_rightA_exp[1] = oQ_rightA_expected_prev[1];
	end
	if (
		( oQ_rightA_expected_prev[2] !== 1'bx ) && ( oQ_rightA_prev[2] !== oQ_rightA_expected_prev[2] )
		&& ((oQ_rightA_expected_prev[2] !== last_oQ_rightA_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightA_expected_prev);
		$display ("     Real value = %b", oQ_rightA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_oQ_rightA_exp[2] = oQ_rightA_expected_prev[2];
	end
	if (
		( oQ_rightA_expected_prev[3] !== 1'bx ) && ( oQ_rightA_prev[3] !== oQ_rightA_expected_prev[3] )
		&& ((oQ_rightA_expected_prev[3] !== last_oQ_rightA_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightA_expected_prev);
		$display ("     Real value = %b", oQ_rightA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_oQ_rightA_exp[3] = oQ_rightA_expected_prev[3];
	end
	if (
		( oQ_rightA_expected_prev[4] !== 1'bx ) && ( oQ_rightA_prev[4] !== oQ_rightA_expected_prev[4] )
		&& ((oQ_rightA_expected_prev[4] !== last_oQ_rightA_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightA_expected_prev);
		$display ("     Real value = %b", oQ_rightA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_oQ_rightA_exp[4] = oQ_rightA_expected_prev[4];
	end
	if (
		( oQ_rightA_expected_prev[5] !== 1'bx ) && ( oQ_rightA_prev[5] !== oQ_rightA_expected_prev[5] )
		&& ((oQ_rightA_expected_prev[5] !== last_oQ_rightA_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightA_expected_prev);
		$display ("     Real value = %b", oQ_rightA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_oQ_rightA_exp[5] = oQ_rightA_expected_prev[5];
	end
	if (
		( oQ_rightA_expected_prev[6] !== 1'bx ) && ( oQ_rightA_prev[6] !== oQ_rightA_expected_prev[6] )
		&& ((oQ_rightA_expected_prev[6] !== last_oQ_rightA_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightA_expected_prev);
		$display ("     Real value = %b", oQ_rightA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_oQ_rightA_exp[6] = oQ_rightA_expected_prev[6];
	end
	if (
		( oQ_rightA_expected_prev[7] !== 1'bx ) && ( oQ_rightA_prev[7] !== oQ_rightA_expected_prev[7] )
		&& ((oQ_rightA_expected_prev[7] !== last_oQ_rightA_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightA_expected_prev);
		$display ("     Real value = %b", oQ_rightA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_oQ_rightA_exp[7] = oQ_rightA_expected_prev[7];
	end
	if (
		( oQ_rightB_expected_prev[0] !== 1'bx ) && ( oQ_rightB_prev[0] !== oQ_rightB_expected_prev[0] )
		&& ((oQ_rightB_expected_prev[0] !== last_oQ_rightB_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightB_expected_prev);
		$display ("     Real value = %b", oQ_rightB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_oQ_rightB_exp[0] = oQ_rightB_expected_prev[0];
	end
	if (
		( oQ_rightB_expected_prev[1] !== 1'bx ) && ( oQ_rightB_prev[1] !== oQ_rightB_expected_prev[1] )
		&& ((oQ_rightB_expected_prev[1] !== last_oQ_rightB_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightB_expected_prev);
		$display ("     Real value = %b", oQ_rightB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_oQ_rightB_exp[1] = oQ_rightB_expected_prev[1];
	end
	if (
		( oQ_rightB_expected_prev[2] !== 1'bx ) && ( oQ_rightB_prev[2] !== oQ_rightB_expected_prev[2] )
		&& ((oQ_rightB_expected_prev[2] !== last_oQ_rightB_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightB_expected_prev);
		$display ("     Real value = %b", oQ_rightB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_oQ_rightB_exp[2] = oQ_rightB_expected_prev[2];
	end
	if (
		( oQ_rightB_expected_prev[3] !== 1'bx ) && ( oQ_rightB_prev[3] !== oQ_rightB_expected_prev[3] )
		&& ((oQ_rightB_expected_prev[3] !== last_oQ_rightB_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightB_expected_prev);
		$display ("     Real value = %b", oQ_rightB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_oQ_rightB_exp[3] = oQ_rightB_expected_prev[3];
	end
	if (
		( oQ_rightB_expected_prev[4] !== 1'bx ) && ( oQ_rightB_prev[4] !== oQ_rightB_expected_prev[4] )
		&& ((oQ_rightB_expected_prev[4] !== last_oQ_rightB_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightB_expected_prev);
		$display ("     Real value = %b", oQ_rightB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_oQ_rightB_exp[4] = oQ_rightB_expected_prev[4];
	end
	if (
		( oQ_rightB_expected_prev[5] !== 1'bx ) && ( oQ_rightB_prev[5] !== oQ_rightB_expected_prev[5] )
		&& ((oQ_rightB_expected_prev[5] !== last_oQ_rightB_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightB_expected_prev);
		$display ("     Real value = %b", oQ_rightB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_oQ_rightB_exp[5] = oQ_rightB_expected_prev[5];
	end
	if (
		( oQ_rightB_expected_prev[6] !== 1'bx ) && ( oQ_rightB_prev[6] !== oQ_rightB_expected_prev[6] )
		&& ((oQ_rightB_expected_prev[6] !== last_oQ_rightB_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightB_expected_prev);
		$display ("     Real value = %b", oQ_rightB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_oQ_rightB_exp[6] = oQ_rightB_expected_prev[6];
	end
	if (
		( oQ_rightB_expected_prev[7] !== 1'bx ) && ( oQ_rightB_prev[7] !== oQ_rightB_expected_prev[7] )
		&& ((oQ_rightB_expected_prev[7] !== last_oQ_rightB_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oQ_rightB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oQ_rightB_expected_prev);
		$display ("     Real value = %b", oQ_rightB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_oQ_rightB_exp[7] = oQ_rightB_expected_prev[7];
	end
	if (
		( oZeroFlag_expected_prev !== 1'bx ) && ( oZeroFlag_prev !== oZeroFlag_expected_prev )
		&& ((oZeroFlag_expected_prev !== last_oZeroFlag_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oZeroFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oZeroFlag_expected_prev);
		$display ("     Real value = %b", oZeroFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_oZeroFlag_exp = oZeroFlag_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Arithmetic_LU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] iA;
reg [7:0] iB;
reg iClk;
reg iLinshiftleft;
reg iLinshiftright;
reg [3:0] iOpCode;
reg iReset;
// wires                                               
wire [7:0] Equal;
wire [7:0] SubNeg;
wire [7:0] SubPos;
wire [7:0] oAccu;
wire oCarryFlag;
wire [7:0] oDiff;
wire [7:0] oQ_leftA;
wire [7:0] oQ_leftB;
wire [7:0] oQ_rightA;
wire [7:0] oQ_rightB;
wire oZeroFlag;

wire sampler;                             

// assign statements (if any)                          
Arithmetic_LU i1 (
// port map - connection between master ports and signals/registers   
	.Equal(Equal),
	.SubNeg(SubNeg),
	.SubPos(SubPos),
	.iA(iA),
	.iB(iB),
	.iClk(iClk),
	.iLinshiftleft(iLinshiftleft),
	.iLinshiftright(iLinshiftright),
	.iOpCode(iOpCode),
	.iReset(iReset),
	.oAccu(oAccu),
	.oCarryFlag(oCarryFlag),
	.oDiff(oDiff),
	.oQ_leftA(oQ_leftA),
	.oQ_leftB(oQ_leftB),
	.oQ_rightA(oQ_rightA),
	.oQ_rightB(oQ_rightB),
	.oZeroFlag(oZeroFlag)
);

// iClk
always
begin
	iClk = 1'b0;
	iClk = #25000 1'b1;
	#25000;
end 

// iLinshiftleft
initial
begin
	iLinshiftleft = 1'b0;
	iLinshiftleft = #570000 1'b1;
	iLinshiftleft = #60000 1'b0;
end 

// iLinshiftright
initial
begin
	iLinshiftright = 1'b0;
	iLinshiftright = #570000 1'b1;
	iLinshiftright = #60000 1'b0;
end 

// iReset
initial
begin
	iReset = 1'b0;
	iReset = #70000 1'b1;
end 
// iA[ 7 ]
initial
begin
	iA[7] = 1'b0;
	iA[7] = #228000 1'b1;
	iA[7] = #57000 1'b0;
	iA[7] = #171000 1'b1;
	iA[7] = #114000 1'b0;
	iA[7] = #57000 1'b1;
	iA[7] = #57000 1'b0;
	iA[7] = #171000 1'b1;
end 
// iA[ 6 ]
initial
begin
	iA[6] = 1'b0;
	iA[6] = #171000 1'b1;
	iA[6] = #285000 1'b0;
	iA[6] = #57000 1'b1;
	iA[6] = #171000 1'b0;
	iA[6] = #57000 1'b1;
	iA[6] = #57000 1'b0;
	iA[6] = #57000 1'b1;
	iA[6] = #57000 1'b0;
end 
// iA[ 5 ]
initial
begin
	iA[5] = 1'b1;
	iA[5] = #57000 1'b0;
	iA[5] = #228000 1'b1;
	iA[5] = #57000 1'b0;
	iA[5] = #57000 1'b1;
	iA[5] = #228000 1'b0;
	iA[5] = #171000 1'b1;
	iA[5] = #57000 1'b0;
	iA[5] = #57000 1'b1;
	iA[5] = #57000 1'b0;
end 
// iA[ 4 ]
initial
begin
	iA[4] = 1'b1;
	iA[4] = #285000 1'b0;
	iA[4] = #114000 1'b1;
	iA[4] = #57000 1'b0;
	iA[4] = #171000 1'b1;
	iA[4] = #57000 1'b0;
	iA[4] = #57000 1'b1;
	iA[4] = #114000 1'b0;
	iA[4] = #57000 1'b1;
end 
// iA[ 3 ]
initial
begin
	iA[3] = 1'b0;
	iA[3] = #228000 1'b1;
	iA[3] = #285000 1'b0;
	iA[3] = #57000 1'b1;
	iA[3] = #114000 1'b0;
	iA[3] = #57000 1'b1;
	iA[3] = #171000 1'b0;
end 
// iA[ 2 ]
initial
begin
	iA[2] = 1'b1;
	iA[2] = #57000 1'b0;
	iA[2] = #171000 1'b1;
	iA[2] = #57000 1'b0;
	iA[2] = #57000 1'b1;
	iA[2] = #57000 1'b0;
	iA[2] = #114000 1'b1;
	iA[2] = #171000 1'b0;
	iA[2] = #57000 1'b1;
	iA[2] = #57000 1'b0;
	iA[2] = #114000 1'b1;
	iA[2] = #57000 1'b0;
end 
// iA[ 1 ]
initial
begin
	iA[1] = 1'b1;
	iA[1] = #171000 1'b0;
	iA[1] = #57000 1'b1;
	iA[1] = #57000 1'b0;
	iA[1] = #171000 1'b1;
	iA[1] = #228000 1'b0;
	iA[1] = #57000 1'b1;
	iA[1] = #171000 1'b0;
	iA[1] = #57000 1'b1;
end 
// iA[ 0 ]
initial
begin
	iA[0] = 1'b0;
	iA[0] = #57000 1'b1;
	iA[0] = #57000 1'b0;
	iA[0] = #114000 1'b1;
	iA[0] = #171000 1'b0;
	iA[0] = #171000 1'b1;
	iA[0] = #57000 1'b0;
	iA[0] = #57000 1'b1;
	iA[0] = #171000 1'b0;
	iA[0] = #57000 1'b1;
end 
// iB[ 7 ]
initial
begin
	iB[7] = 1'b1;
	iB[7] = #61000 1'b0;
	iB[7] = #61000 1'b1;
	iB[7] = #61000 1'b0;
	iB[7] = #61000 1'b1;
	iB[7] = #122000 1'b0;
	iB[7] = #61000 1'b1;
	iB[7] = #61000 1'b0;
	iB[7] = #183000 1'b1;
	iB[7] = #122000 1'b0;
	iB[7] = #122000 1'b1;
	iB[7] = #61000 1'b0;
end 
// iB[ 6 ]
initial
begin
	iB[6] = 1'b1;
	iB[6] = #61000 1'b0;
	iB[6] = #427000 1'b1;
	iB[6] = #61000 1'b0;
	iB[6] = #122000 1'b1;
	iB[6] = #61000 1'b0;
	iB[6] = #183000 1'b1;
end 
// iB[ 5 ]
initial
begin
	iB[5] = 1'b0;
	iB[5] = #122000 1'b1;
	iB[5] = #122000 1'b0;
	iB[5] = #61000 1'b1;
	iB[5] = #61000 1'b0;
	iB[5] = #61000 1'b1;
	iB[5] = #61000 1'b0;
	iB[5] = #61000 1'b1;
	iB[5] = #244000 1'b0;
	iB[5] = #61000 1'b1;
end 
// iB[ 4 ]
initial
begin
	iB[4] = 1'b1;
	iB[4] = #61000 1'b0;
	iB[4] = #122000 1'b1;
	iB[4] = #61000 1'b0;
	iB[4] = #122000 1'b1;
	iB[4] = #122000 1'b0;
	iB[4] = #244000 1'b1;
	iB[4] = #122000 1'b0;
	iB[4] = #61000 1'b1;
	iB[4] = #61000 1'b0;
end 
// iB[ 3 ]
initial
begin
	iB[3] = 1'b1;
	iB[3] = #183000 1'b0;
	iB[3] = #61000 1'b1;
	iB[3] = #183000 1'b0;
	iB[3] = #61000 1'b1;
	iB[3] = #61000 1'b0;
	iB[3] = #122000 1'b1;
	iB[3] = #183000 1'b0;
end 
// iB[ 2 ]
initial
begin
	iB[2] = 1'b0;
	iB[2] = #61000 1'b1;
	iB[2] = #61000 1'b0;
	iB[2] = #122000 1'b1;
	iB[2] = #122000 1'b0;
	iB[2] = #61000 1'b1;
	iB[2] = #61000 1'b0;
	iB[2] = #61000 1'b1;
	iB[2] = #244000 1'b0;
	iB[2] = #122000 1'b1;
end 
// iB[ 1 ]
initial
begin
	iB[1] = 1'b0;
	iB[1] = #122000 1'b1;
	iB[1] = #122000 1'b0;
	iB[1] = #61000 1'b1;
	iB[1] = #427000 1'b0;
end 
// iB[ 0 ]
initial
begin
	iB[0] = 1'b1;
	iB[0] = #305000 1'b0;
	iB[0] = #61000 1'b1;
	iB[0] = #61000 1'b0;
	iB[0] = #61000 1'b1;
	iB[0] = #61000 1'b0;
	iB[0] = #183000 1'b1;
	iB[0] = #61000 1'b0;
	iB[0] = #61000 1'b1;
end 
// iOpCode[ 3 ]
initial
begin
	iOpCode[3] = 1'b0;
	iOpCode[3] = #568000 1'b1;
end 
// iOpCode[ 2 ]
initial
begin
	iOpCode[2] = 1'b0;
	iOpCode[2] = #284000 1'b1;
	iOpCode[2] = #284000 1'b0;
	iOpCode[2] = #284000 1'b1;
end 
// iOpCode[ 1 ]
initial
begin
	repeat(3)
	begin
		iOpCode[1] = 1'b0;
		iOpCode[1] = #142000 1'b1;
		# 142000;
	end
	iOpCode[1] = 1'b0;
	iOpCode[1] = #142000 1'b1;
end 
// iOpCode[ 0 ]
initial
begin
	repeat(7)
	begin
		iOpCode[0] = 1'b0;
		iOpCode[0] = #71000 1'b1;
		# 71000;
	end
	iOpCode[0] = 1'b0;
end 

Arithmetic_LU_vlg_sample_tst tb_sample (
	.iA(iA),
	.iB(iB),
	.iClk(iClk),
	.iLinshiftleft(iLinshiftleft),
	.iLinshiftright(iLinshiftright),
	.iOpCode(iOpCode),
	.iReset(iReset),
	.sampler_tx(sampler)
);

Arithmetic_LU_vlg_check_tst tb_out(
	.Equal(Equal),
	.SubNeg(SubNeg),
	.SubPos(SubPos),
	.oAccu(oAccu),
	.oCarryFlag(oCarryFlag),
	.oDiff(oDiff),
	.oQ_leftA(oQ_leftA),
	.oQ_leftB(oQ_leftB),
	.oQ_rightA(oQ_rightA),
	.oQ_rightB(oQ_rightB),
	.oZeroFlag(oZeroFlag),
	.sampler_rx(sampler)
);
endmodule

